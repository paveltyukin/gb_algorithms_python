'''
1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100).

Выведите на экран исходный и отсортированный массивы.

Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
'''

import random, cProfile, timeit

def bubble_sort_reverse(N):
    lst = [random.randint(-100,100) for _ in range(N)]
    count = 0
    n = 1
    while n < len(lst):
        for j in range(len(lst) - n):
            if lst[j] < lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
            
            count += 1
        
        n += 1
    return lst

# python -m timeit -n 1000 -s "import les_7_task_1" "les_7_task_1.bubble_sort_reverse(100)"
# 1000 loops, best of 5: 684 usec per loop
# cProfile.run('bubble_sort_reverse(10000)')
# 1    6.919    6.919    6.936    6.936 les_7_task_1.py:15(bubble_sort_reverse)
# ======================================================== 
# [-3, -38, -25, 77, -88, 48, -43, 3, 41, 41]
# ======================================================== 
# [-3, -38, -25, 77, -88, 48, -43, 3, 41, 41]
# [-3, -25, -38, 77, -88, 48, -43, 3, 41, 41]
# [-3, -25, 77, -38, -88, 48, -43, 3, 41, 41]
# [-3, -25, 77, -38, -88, 48, -43, 3, 41, 41]
# [-3, -25, 77, -38, 48, -88, -43, 3, 41, 41]
# [-3, -25, 77, -38, 48, -43, -88, 3, 41, 41]
# [-3, -25, 77, -38, 48, -43, 3, -88, 41, 41]
# [-3, -25, 77, -38, 48, -43, 3, 41, -88, 41]
# [-3, -25, 77, -38, 48, -43, 3, 41, 41, -88]
# [-3, -25, 77, -38, 48, -43, 3, 41, 41, -88]
# [-3, 77, -25, -38, 48, -43, 3, 41, 41, -88]
# [-3, 77, -25, -38, 48, -43, 3, 41, 41, -88]
# [-3, 77, -25, 48, -38, -43, 3, 41, 41, -88]
# [-3, 77, -25, 48, -38, -43, 3, 41, 41, -88]
# [-3, 77, -25, 48, -38, 3, -43, 41, 41, -88]
# [-3, 77, -25, 48, -38, 3, 41, -43, 41, -88]
# [-3, 77, -25, 48, -38, 3, 41, 41, -43, -88]
# [77, -3, -25, 48, -38, 3, 41, 41, -43, -88]
# [77, -3, -25, 48, -38, 3, 41, 41, -43, -88]
# [77, -3, 48, -25, -38, 3, 41, 41, -43, -88]
# [77, -3, 48, -25, -38, 3, 41, 41, -43, -88]
# [77, -3, 48, -25, 3, -38, 41, 41, -43, -88]
# [77, -3, 48, -25, 3, 41, -38, 41, -43, -88]
# [77, -3, 48, -25, 3, 41, 41, -38, -43, -88]
# [77, -3, 48, -25, 3, 41, 41, -38, -43, -88]
# [77, 48, -3, -25, 3, 41, 41, -38, -43, -88]
# [77, 48, -3, -25, 3, 41, 41, -38, -43, -88]
# [77, 48, -3, 3, -25, 41, 41, -38, -43, -88]
# [77, 48, -3, 3, 41, -25, 41, -38, -43, -88]
# [77, 48, -3, 3, 41, 41, -25, -38, -43, -88]
# [77, 48, -3, 3, 41, 41, -25, -38, -43, -88]
# [77, 48, -3, 3, 41, 41, -25, -38, -43, -88]
# [77, 48, 3, -3, 41, 41, -25, -38, -43, -88]
# [77, 48, 3, 41, -3, 41, -25, -38, -43, -88]
# [77, 48, 3, 41, 41, -3, -25, -38, -43, -88]
# [77, 48, 3, 41, 41, -3, -25, -38, -43, -88]
# [77, 48, 3, 41, 41, -3, -25, -38, -43, -88]
# [77, 48, 41, 3, 41, -3, -25, -38, -43, -88]
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]
# ======================================================== 
# count 45
# ======================================================== 
# [77, 48, 41, 41, 3, -3, -25, -38, -43, -88]

# Без модернизации:
def bubble_sort_reverse_old(N):
    lst = [random.randint(-100,100) for _ in range(N)]
    
    count = 0
    n = 1
    for i in range(len(lst)):
        for j in range(len(lst) - n):
            if lst[j] < lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
            
            count += 1
    return lst

# python -m timeit -n 1000 -s "import les_7_task_1" "les_7_task_1.bubble_sort_reverse_old(100)"
# 1000 loops, best of 5: 1.03 msec per loop
# cProfile.run('bubble_sort_reverse_old(10000)')
# 1   11.263   11.263   11.283   11.283 les_7_task_1.py:87(bubble_sort_reverse_old)
# ======================================================== 
# [3, 71, -26, -50, -49, 90, 48, 49, 22, 20]
# ======================================================== 
# [71, 3, -26, -50, -49, 90, 48, 49, 22, 20]
# [71, 3, -26, -50, -49, 90, 48, 49, 22, 20]
# [71, 3, -26, -50, -49, 90, 48, 49, 22, 20]
# [71, 3, -26, -49, -50, 90, 48, 49, 22, 20]
# [71, 3, -26, -49, 90, -50, 48, 49, 22, 20]
# [71, 3, -26, -49, 90, 48, -50, 49, 22, 20]
# [71, 3, -26, -49, 90, 48, 49, -50, 22, 20]
# [71, 3, -26, -49, 90, 48, 49, 22, -50, 20]
# [71, 3, -26, -49, 90, 48, 49, 22, 20, -50]
# [71, 3, -26, -49, 90, 48, 49, 22, 20, -50]
# [71, 3, -26, -49, 90, 48, 49, 22, 20, -50]
# [71, 3, -26, -49, 90, 48, 49, 22, 20, -50]
# [71, 3, -26, 90, -49, 48, 49, 22, 20, -50]
# [71, 3, -26, 90, 48, -49, 49, 22, 20, -50]
# [71, 3, -26, 90, 48, 49, -49, 22, 20, -50]
# [71, 3, -26, 90, 48, 49, 22, -49, 20, -50]
# [71, 3, -26, 90, 48, 49, 22, 20, -49, -50]
# [71, 3, -26, 90, 48, 49, 22, 20, -49, -50]
# [71, 3, -26, 90, 48, 49, 22, 20, -49, -50]
# [71, 3, -26, 90, 48, 49, 22, 20, -49, -50]
# [71, 3, 90, -26, 48, 49, 22, 20, -49, -50]
# [71, 3, 90, 48, -26, 49, 22, 20, -49, -50]
# [71, 3, 90, 48, 49, -26, 22, 20, -49, -50]
# [71, 3, 90, 48, 49, 22, -26, 20, -49, -50]
# [71, 3, 90, 48, 49, 22, 20, -26, -49, -50]
# [71, 3, 90, 48, 49, 22, 20, -26, -49, -50]
# [71, 3, 90, 48, 49, 22, 20, -26, -49, -50]
# [71, 3, 90, 48, 49, 22, 20, -26, -49, -50]
# [71, 90, 3, 48, 49, 22, 20, -26, -49, -50]
# [71, 90, 48, 3, 49, 22, 20, -26, -49, -50]
# [71, 90, 48, 49, 3, 22, 20, -26, -49, -50]
# [71, 90, 48, 49, 22, 3, 20, -26, -49, -50]
# [71, 90, 48, 49, 22, 20, 3, -26, -49, -50]
# [71, 90, 48, 49, 22, 20, 3, -26, -49, -50]
# [71, 90, 48, 49, 22, 20, 3, -26, -49, -50]
# [71, 90, 48, 49, 22, 20, 3, -26, -49, -50]
# [90, 71, 48, 49, 22, 20, 3, -26, -49, -50]
# [90, 71, 48, 49, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# ======================================================== 
# count 90
# ======================================================== 
# [90, 71, 49, 48, 22, 20, 3, -26, -49, -50]
# 
# Ровно в 2 раза меньше действий.
# При расчете скорости выполнения работы функций,
# получаю примерно в 2 раза увеличение скорости.